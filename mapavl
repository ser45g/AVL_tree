#pragma once
#ifndef AVL_TREE
#define AVL_TREE
#include <vector>
#include <exception>
#include <iostream>

using std::pair;
using std::vector;
using std::exception;
using std::make_pair;
using std::max;
using std::move;
using std::cout;
using std::endl;

//#define debug //and then the desturctor/clear will print elements which are going to be deleted

template <class Key, class Val>
class mapavl {
private:

	struct Node_mapavl
	{
		Node_mapavl* parent = nullptr;
		Node_mapavl* right = nullptr;
		Node_mapavl* left = nullptr;
		unsigned char _height = 0;
		pair<Key, Val> _data{ Key(),Val() };
	};

public:
	class mapavl_iterator;
	class const_mapavl_iterator;
	class reverse_mapavl_iterator;
	using iterator = mapavl_iterator;
	using const_iterator = const_mapavl_iterator;
	using reverse_iterator = reverse_mapavl_iterator;
	using Node = Node_mapavl;

private:
	Node* _root = nullptr;
	unsigned long _count = 0;
protected:

	void preorder_traversal_nesting(Node* root) const noexcept {
		if (root) {
			cout << root->_data.first() << ' ';
			preorder_traversal_nesting(root->left);
			preorder_traversal_nesting(root->right);
		}
	}
	void postorder_traversal_nesting(Node* root) const noexcept {
		if (root) {
			postorder_traversal_nesting(root->left);
			postorder_traversal_nesting(root->right);
			cout << root->_data.first() << ' ';
		}
	}
	void inorder_traversal_nesting(Node* root) const noexcept {
		if (root) {
			inorder_traversal_nesting(root->left);
			cout << root->_data.first() << ' ';
			inorder_traversal_nesting(root->right);
		}
	}
	void rev_inorder_traversal_nesting(Node* root) const noexcept {
		if (root) {
			rev_inorder_traversal_nesting(root->right);
			cout << root->_data.first() << ' ';
			rev_inorder_traversal_nesting(root->left);
		}
	}

	Node* _min_el(Node* node) const noexcept;

	Node* _max_el(Node* node) const noexcept;

	Node* insert(Node* node);

	void clear(Node* root) noexcept {
		if (root) {
			clear(root->left);
			clear(root->right);
			#ifdef debug 
			cout << "delete -->" << root->_data.first << " -- " <<
			root->_data.second << '\n';
			#endif
			delete root;
		}
		_root = 0;
		_count = 0;
	}
	
	void little_balance(Node* node) noexcept;

	unsigned char height(Node* head) const noexcept;

	void leftRotate(Node* x) noexcept;

	void rightRotate(Node* x) noexcept;

	void balance(Node* head) noexcept;

protected:
	template <class _Pred>
	void inorder_traversal(_Pred Pred);

	template <class _Pred>
	void rev_inorder_traversal(_Pred Pred);

	template <class _Pred>
	void preorder_traversal(_Pred Pred);

	template <class _Pred>
	void postorder_traversalv1(_Pred Pred);
	
	template <class _Pred>
	void postorder_traversal(_Pred Pred);

	template <class _Pred>
	void breadth_traversal(_Pred Pred);

	template <class _Pred>
	void breadth_traversal(_Pred Pred) const;

public:
	void preorder_traversal_nesting() const noexcept { preorder_traversal_nesting(_root); }
	void postorder_traversal_nesting() const noexcept { postorder_traversal_nesting(_root); }
	void inorder_traversal_nesting() const noexcept { inorder_traversal_nesting(_root); }
	void rev_inorder_traversal_nesting() const noexcept { rev_inorder_traversal_nesting(_root); }

	long count()const noexcept { return _count; }

	long size()const noexcept { return count(); }

	short height()const noexcept { return _root ? _root->_height : 0; }

	bool erase(const Key& key) noexcept;

	iterator insert(const std::pair<Key, Val>& pair) noexcept;

	iterator insert(std::pair<Key, Val>&& pair) noexcept;

	template <class _Iterator >
	void insert(_Iterator first, const _Iterator& last);

	iterator emplace(const Key& key, const Val& val);

	iterator emplace(Key&& key, Val&& val) noexcept { return insert(make_pair(move(key), move(val))); }

	iterator find(const Key& key)const noexcept;

	bool contains(const Key& key)const noexcept { return (find(key) != nullptr) ? true : false; }

	bool empty()const noexcept { return _root == nullptr; }

	iterator max_el() const noexcept { return  (_max_el(_root)); }

	iterator min_el() const noexcept { return _min_el(_root); }

	pair<iterator, iterator> minmax_el()const noexcept { return make_pair(min_el(), max_el()); }

	iterator lower_bound(const Key& key) const noexcept;

	iterator upper_bound(const Key& key) const noexcept;

	pair<iterator, iterator> equal_range(const Key& key) noexcept;

	const mapavl<Key, Val>& merge(const mapavl& t) noexcept;

	const mapavl<Key, Val>& merge(mapavl&& t) noexcept;

	mapavl() :_root(nullptr), _count(0) {}

	mapavl(std::initializer_list<pair<Key, Val> > l);

	template <typename _InIterator>
	mapavl(_InIterator first, const _InIterator last) { insert(first, last); }

	mapavl(const pair<Key, Val>& p1, const pair<Key, Val>& p2) = delete;

	mapavl(const mapavl<Key, Val>& t);

	mapavl(mapavl<Key, Val>&& rv) noexcept : mapavl() { swap(rv); }

	template <typename ...Args>
	mapavl(Args...args) : mapavl() { unwind(args...); }

	template <typename... Args>
	void unwind(const std::pair<Key, Val>& pair, Args...args) noexcept;

	template <typename... Args>
	void unwind(const std::pair<Key, Val>& pair) noexcept { insert(pair); }

	Val& operator[](const Key& key) noexcept;

	const Val& operator[](const Key& key) const;

	~mapavl() noexcept;

	void clear() noexcept;

	mapavl<Key, Val>& operator=(const mapavl<Key, Val>& t) noexcept;

	mapavl<Key, Val>& operator=(mapavl<Key, Val>&& rv) noexcept;

	void swap(mapavl<Key, Val>& t) noexcept;

	void swap(mapavl<Key, Val>&& t) noexcept;

	iterator begin() const noexcept { return _min_el(_root); }

	iterator end() const noexcept { return nullptr; }

	const_iterator cbegin() const noexcept { return _min_el(_root); }

	const_iterator cend() const noexcept { return nullptr; }

	reverse_iterator rbegin() const noexcept { return _max_el(_root); }

	reverse_iterator rend() const noexcept { return nullptr; }
};

template<class Key, class Val>
class mapavl<Key, Val>::mapavl_iterator {
private:
	using iterator = mapavl_iterator;
	typedef std::bidirectional_iterator_tag     iterator_category;
	Node* ptr;
public:
	//explicit
	mapavl_iterator(Node* node) :ptr(node) {}

	mapavl_iterator(const iterator& it) = default;

	mapavl_iterator() : ptr(nullptr) {}

	pair<Key, Val>& operator*() noexcept { return ptr->_data; }

	const pair<Key, Val>& operator*()const noexcept { return ptr->_data; }

	bool operator==(const iterator& it) const noexcept { return this->ptr == it.ptr; }

	bool operator!=(const iterator& it) const noexcept { return this->ptr != it.ptr; }

	iterator& operator++() {
		Node* p;
		if (!ptr)
			throw exception("the tree is empty");
		if (ptr->right != nullptr)
		{
			// successor is the farthest left node of
			// right subtree
			ptr = ptr->right;
			while (ptr->left != nullptr) {
				ptr = ptr->left;
			}
		}
		else
		{
			p = ptr->parent;
			while (p != nullptr && ptr == p->right)
			{
				ptr = p;
				p = p->parent;
			}
			ptr = p;
			// have already processed the left subtree, and
			// there is no right subtree. move up the tree,
			// looking for a parent for which nodePtr is a left child,
			// stopping if the parent becomes NULL. a non-NULL parent
			// is the successor. if parent is NULL, the original node
			// was the last node inorder, and its successor
			// is the end of the list
			// if we were previously at the right-most node in
			// the tree, nodePtr = nullptr, and the iterator specifies
			// the end of the list
		}
		return *this;
	}

	iterator operator++(int) {
		Node* temp = ptr;
		operator++();
		return iterator(temp);
	}

	iterator& operator--() {
		Node* p;
		if (ptr == nullptr)
			throw exception("the tree is empty");
		if (ptr->left != nullptr)
		{
			ptr = ptr->left;
			while (ptr->right != nullptr)
				ptr = ptr->right;
		}
		else
		{
			p = ptr->parent;
			while (p != nullptr && ptr == p->left)
			{
				ptr = p;
				p = p->parent;
			}
			ptr = p;
		}
		return *this;
	}

	iterator operator--(int) {
		Node* temp = ptr;
		operator--();
		return temp;
	}

	Node* operator->()const noexcept { return ptr; }
};

template<class Key, class Val>
class mapavl<Key, Val>::const_mapavl_iterator : private mapavl_iterator {
public:
	using mapavl_iterator::mapavl_iterator;
	const_mapavl_iterator(const iterator& it) :iterator(it) {}

	const pair<int, int>& operator*()const { return iterator::operator*(); }

	const_mapavl_iterator& operator=(const const_iterator& it) = delete;

};

template<class Key, class Val>
class mapavl<Key, Val>::reverse_mapavl_iterator :public mapavl_iterator {
public:
	using reverse_iterator = reverse_mapavl_iterator;
	using mapavl_iterator::mapavl_iterator;

	explicit reverse_mapavl_iterator(const iterator& it) :iterator(it) {}

	bool operator==(const reverse_iterator& it) const noexcept { return iterator::operator==(it); }

	bool operator!=(const reverse_iterator& it) const noexcept { return iterator::operator!=(it); }

	reverse_iterator& operator++() { *this = reverse_iterator(iterator::operator--()); return *this; }

	reverse_iterator operator++(int) { return reverse_iterator(iterator::operator--(int())); }

	reverse_iterator& operator--() { *this = reverse_iterator(iterator::operator++()); return *this; }

	reverse_iterator operator--(int) { return iterator::operator++(int()); }
};

template<class Key, class Val>
mapavl<Key, Val>::Node* mapavl<Key, Val>::_min_el(Node* node) const noexcept {
	if (empty())
		return NULL;
	Node* temp = node;
	while (temp->left)
		temp = temp->left;
	return temp;
}

template<class Key, class Val>
mapavl<Key, Val>::Node* mapavl<Key, Val>::_max_el(Node* node) const noexcept {
	if (empty())
		return NULL;
	Node* temp = node;
	while (temp->right)
		temp = temp->right;
	return temp;
}

template<class Key, class Val>
mapavl<Key, Val>::Node* mapavl<Key, Val>::insert(Node* node) {
	Node* y = nullptr;
	Node* x = this->_root;

	while (x != nullptr) {
		y = x;
		if (node->_data.first < x->_data.first) {
			x = x->left;
		}
		else if (node->_data.first > x->_data.first) {
			x = x->right;
		}
		else {
			//cout << "SAS\n";
			return x;
		}
	}
	node->parent = y;
	if (y == nullptr) {
		_root = node;
	}
	else if (node->_data.first < y->_data.first) {
		y->left = node;
	}
	else {
		y->right = node;
	}
	_count++;

	//little_balance(node);
	return node;
}

template<class Key, class Val>
void mapavl<Key, Val>::little_balance(Node* node) noexcept {
	while (node) {
		balance(node);
		node = node->parent;
	}
}

template<class Key, class Val>
inline unsigned char mapavl<Key, Val>::height(Node* head) const noexcept {
	if (!head)
		return 0;
	return head->_height;
}

template<class Key, class Val>
void mapavl<Key, Val>::leftRotate(Node* x) noexcept {
	Node* y = x->right;
	x->right = y->left;
	if (y->left != nullptr) {
		y->left->parent = x;
	}
	y->parent = x->parent;
	if (x->parent == nullptr) {
		this->_root = y;
	}
	else if (x == x->parent->left) {
		x->parent->left = y;
	}
	else {
		x->parent->right = y;
	}
	y->left = x;
	x->parent = y;

	// update the balance factor
	x->_height = 1 + max(height(x->left), height(x->right));
	y->_height = 1 + max(height(y->left), height(y->right));

}

template<class Key, class Val>
void mapavl<Key, Val>::rightRotate(Node* x) noexcept {
	Node* y = x->left;
	x->left = y->right;
	if (y->right != nullptr) {
		y->right->parent = x;
	}
	y->parent = x->parent;
	if (x->parent == nullptr) {
		this->_root = y;
	}
	else if (x == x->parent->right) {
		x->parent->right = y;
	}
	else {
		x->parent->left = y;
	}
	y->right = x;
	x->parent = y;

	// update the balance factor
	x->_height = 1 + max(height(x->left), height(x->right));
	y->_height = 1 + max(height(y->left), height(y->right));
}

template<class Key, class Val>
void mapavl<Key, Val>::balance(Node* head) noexcept {
	head->_height = 1 + max(height(head->left), height(head->right));
	int dif = height(head->left) - height(head->right);
	if (dif > 1) {
		if ((height(head->left->left) - height(head->left->right)) > 0) {
			return rightRotate(head);
		}
		else {
			leftRotate(head->left);
			return rightRotate(head);
		}
	}
	else if (dif < -1) {
		if ((height(head->right->left) - height(head->right->right) > 0)) {
			rightRotate(head->right);
			return leftRotate(head);
		}
		else {
			return leftRotate(head);
		}
	}
	return;
}

template<class Key, class Val>
bool mapavl<Key, Val>::erase(const Key& key) noexcept {
	Node* temp = find(key).operator->();
	if (!temp)
		return false;
	bool is_root = temp->parent == nullptr;
	bool bond_left = false;
	if (temp->parent)
		bond_left = temp == temp->parent->left;
	else bond_left = false;

	if (!temp->left && !temp->right) {
		if (!is_root) {
			(bond_left ? temp->parent->left : temp->parent->right) = nullptr;
		}
		else
			_root = nullptr;
	}
	else if (temp->left && !temp->right) {
		if (!is_root) {
			temp->left->parent = temp->parent;
			(bond_left ? temp->parent->left : temp->parent->right) = temp->left;
		}
		else {
			_root = temp->left;
		}
	}
	else if (!temp->left && temp->right) {
		if (!is_root) {
			temp->right->parent = temp->parent;
			(bond_left ? temp->parent->left : temp->parent->right) = temp->right;
		}
		else _root = temp->right;
	}
	else if (temp->left && temp->right) {
		Node* min = _min_el(temp->right);

		if (min == temp->right) {
			temp->right = min->right;
		}
		else {
			min->parent->left = min->right;

		}
		if (min->right)
			min->right->parent = min->parent;
		temp->_data = min->_data;
		temp = min;
	}
	if (_root)
		_root->parent = nullptr;
	Node* res = temp->parent;
	delete temp;
	_count--;

	//Part 2: rebalance the tree
	little_balance(res);
	return true;
}

template<class Key, class Val>
mapavl<Key, Val>::iterator mapavl<Key, Val>::insert(const std::pair<Key, Val>& pair) noexcept {
	Node* node = new  Node{ nullptr,nullptr,nullptr,1,pair };
	node = insert(node);
	little_balance(node);
	return node;
}

template<class Key, class Val>
mapavl<Key, Val>::iterator mapavl<Key, Val>::insert(std::pair<Key, Val>&& pair) noexcept {
	Node* node = new  Node{ nullptr,nullptr,nullptr,1,std::move(pair) };
	node = insert(node);
	little_balance(node);
	return node;
}

template<class Key, class Val>
mapavl<Key, Val>::iterator mapavl<Key, Val>::emplace(const Key& key, const Val& val) {
	return insert(make_pair(key, val));
}

template<class Key, class Val>
inline mapavl<Key, Val>::iterator mapavl<Key, Val>::find(const Key& key) const noexcept {
	if (!_root)
		return nullptr;
	Node* current = _root;
	while (true) {
		if (key < current->_data.first)
			current = current->left;
		else if (key > current->_data.first)
			current = current->right;
		else return current;
		if (current == nullptr)
			return nullptr;
	}
	return nullptr;
}

template<class Key, class Val>
inline  mapavl<Key, Val>::iterator mapavl<Key, Val>::lower_bound(const Key& key) const noexcept {
	if (empty())
		return nullptr;
	Node* temp = _root;
	Node* low = _max_el(_root);
	if (key > low->_data.first)
		return nullptr;
	while (temp != nullptr) {

		if (temp->_data.first > key) {
			if (temp->_data.first < low->_data.first)
				low = temp;
			temp = temp->left;
			if (temp->_data.first < low->_data.first)
				low = temp;
		}
		else if (temp->_data.first < key) {
			temp = temp->right;
		}
		else
			return temp;
	}
	return low;
}

template<class Key, class Val>
inline mapavl<Key, Val>::iterator mapavl<Key, Val>::upper_bound(const Key& key) const noexcept {
	if (empty())
		return nullptr;
	Node* temp = _root;
	Node* low = _max_el(_root);
	if (key >= low->_data.first)
		return nullptr;
	while (temp != nullptr) {
		if (temp->_data.first > key) {
			if (temp->_data.first < low->_data.first)
				low = temp;
			temp = temp->left;
		}
		else if (temp->_data.first <= key) {

			temp = temp->right;
		}

	}
	return low;
}

template<class Key, class Val>
std::pair<typename  mapavl<Key, Val>::iterator,
typename  mapavl<Key, Val>::iterator> mapavl<Key, Val>::equal_range(const Key& key) noexcept {
	return std::make_pair(lower_bound(key), upper_bound(key));
}

template<class Key, class Val>
const mapavl<Key, Val>& mapavl<Key, Val>::merge(const mapavl& t) noexcept {
	t.breadth_traversal([this](const pair<Key, Val>& p) {this->insert(p); });
	return *this;
}

template<class Key, class Val>
const mapavl<Key, Val>& mapavl<Key, Val>::merge(mapavl&& t) noexcept {
	t.breadth_traversal([&](Node*p) {insert(std::move(p->_data)); });
	return *this;
}

template<class Key, class Val>
mapavl<Key, Val>::mapavl(std::initializer_list<pair<Key, Val>> l) :mapavl() {
	for (auto&& x : l)
		insert(x); //don't know why it doesn't work, goes to const pair...&
}

template<class Key, class Val>
mapavl<Key, Val>::mapavl(const mapavl<Key, Val>& t) :mapavl() {
	t.breadth_traversal([&](const std::pair<Key,Val>& p) {
		insert(new Node{nullptr,nullptr,nullptr,1,p});//doesn't check whether the balance is broken
		});						//or not, cause it's the breadth_traversal
}

template<class Key, class Val>
Val& mapavl<Key, Val>::operator[](const Key& key) noexcept {
	iterator x = insert(make_pair(key, Val()));
	return (*x).second;
}

template<class Key, class Val>
const Val& mapavl<Key, Val>::operator[](const Key& key) const {
	iterator x = find(key);
	if (x->ptr == nullptr)
		throw exception("no element with such key");
	return (*x).second;
}

template<class Key, class Val>
mapavl<Key, Val>::~mapavl() noexcept {
	//cout << "THE DESTRUTION TIME" << endl;
	clear();
}

template<class Key, class Val>
void mapavl<Key, Val>::clear() noexcept {
	clear(_root);
}

template<class Key, class Val>
mapavl<Key, Val>& mapavl<Key, Val>::operator=(const mapavl<Key, Val>& t) noexcept {
	mapavl<Key, Val> temp = t;
	swap(temp);
	return *(this);
}

template<class Key, class Val>
mapavl<Key, Val>& mapavl<Key, Val>::operator=(mapavl<Key, Val>&& rv) noexcept {
	swap(rv);
	return *(this);
}

template<class Key, class Val>
inline void mapavl<Key, Val>::swap(mapavl<Key, Val>& t) noexcept {
	std::swap(_root, t._root);
	std::swap(_count, t._count);
}

template<class Key, class Val>
inline void mapavl<Key, Val>::swap(mapavl<Key, Val>&& t) noexcept {
	std::swap(_root, t._root);
	std::swap(_count, t._count);
}

template<class Key, class Val>
template<class _Pred>
void mapavl<Key, Val>::inorder_traversal(_Pred Pred) {
	std::vector< Node*> s;
	Node* temp = _root;
	while (true) {
		if (temp) {
			s.push_back(temp);
			temp = temp->left;
		}
		else {
			if (s.empty())
				return;
			temp = s.back(); s.pop_back();
			Pred(temp);
			temp = temp->right;
		}
	}
}

template<class Key, class Val>
template<class _Pred>
void mapavl<Key, Val>::rev_inorder_traversal(_Pred Pred) {
	std::vector< Node*> s;
	Node* temp = _root;
	while (true) {
		if (temp) {
			s.push_back(temp);
			temp = temp->right;
		}
		else {
			if (s.empty())
				return;
			temp = s.back(); s.pop_back();
			Pred(temp);
			temp = temp->left;
		}
	}
}

template<class Key, class Val>
template<class _Pred>
void mapavl<Key, Val>::preorder_traversal(_Pred Pred) {
	std::vector< Node*> s;
	Node* temp = _root;
	while (true) {
		if (temp) {
			s.push_back(temp);
			Pred(temp);
			temp = temp->left;
		}
		else {
			if (s.empty())
				return;
			temp = s.back(); s.pop_back();
			temp = temp->right;
		}
	}
}

template<class Key, class Val>
template<class _Pred>
void mapavl<Key, Val>::postorder_traversalv1(_Pred Pred) {
	std:: vector< Node*> st;
	Node* temp = _root;
	while (true) {
		while (temp) {
			st.push_back(temp);
			st.push_back(temp);
			temp = temp->left;
		}
		if (st.empty())
			return;
		temp = st.back();
		st.pop();
		if (!st.empty() && st.back() == temp)
			temp = temp->right;
		else {
			Pred(temp);
			temp = nullptr;
		}
	}
}

template <class Key,class Val>
template <class _Pred>
void mapavl<Key, Val>::postorder_traversal(_Pred Pred) {
	std::vector<Node*> leftStack;
	Node* currentNode = _root;
	Node* save = _root;
	while (!leftStack.empty() || currentNode != NULL)
	{
		if (currentNode)
		{
			leftStack.push_back(currentNode);
			currentNode = currentNode->left;
		}
		else
		{
			currentNode = leftStack.back();
			leftStack.pop_back();
			save = currentNode;
			currentNode = currentNode->right;
			Pred(save);
		}
	}
}

template<class Key, class Val>
template<class _Pred>
void mapavl<Key, Val>::breadth_traversal(_Pred Pred) {
	std::vector< Node*> q;
	Node* temp = _root;
	q.push_back(temp);
	while (!q.empty()) {
		temp = q.front();
		q.erase(q.begin());
		Pred(temp);
		if (temp->left) {
			q.push_back(temp->left);
		}
		if (temp->right) {
			q.push_back(temp->right);
		}
	}
}

template<class Key, class Val>
template<class _Pred>
void mapavl<Key, Val>::breadth_traversal(_Pred Pred) const {
	std::vector< Node* > q;
	Node* temp = _root;
	q.push_back(temp);
	while (!q.empty()) {
		temp = q.front();
		q.erase(q.begin());
		Pred(temp->_data);
		if (temp->left) {
			q.push_back(temp->left);
		}
		if (temp->right) {
			q.push_back(temp->right);
		}
	}
}

template<class Key, class Val>
template<class _Iterator>
void mapavl<Key, Val>::insert(_Iterator first, const _Iterator& last) {
	for (; first != last; ++first)
		insert(*(first));
}

template<class Key, class Val>
template<typename ...Args>
void mapavl<Key, Val>::unwind(const std::pair<Key, Val>& pair, Args ...args) noexcept {
	insert(pair);
	unwind(args...);
}

#endif //!AVL_TREE
